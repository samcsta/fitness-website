<%- contentFor('body') %>

<div class="workout-container">
    <div class="workout-header">
        <div class="date-selector">
            <button id="prev-date" class="btn-icon"><i class="fas fa-chevron-left"></i></button>
            <div id="current-date" class="current-date">
                <span id="date-display"><%= date %></span>
                <input type="date" id="date-picker" value="<%= date %>">
            </div>
            <button id="next-date" class="btn-icon"><i class="fas fa-chevron-right"></i></button>
        </div>
        
        <div class="workout-actions">
            <button id="mark-complete" class="btn btn-success">Mark All Complete</button>
            <button id="mark-skipped" class="btn btn-danger">Skip Workout</button>
        </div>
    </div>
    
    <div id="workout-info" class="workout-info">
        <div class="workout-loading">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Loading workout...</span>
        </div>
    </div>
    
    <div id="exercises-container" class="exercises-container"></div>
    
    <!-- Exercise details modal -->
    <div id="exercise-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modal-exercise-name">Exercise Name</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="exercise-details">
                    <div class="input-group">
                        <label for="exercise-sets">Sets</label>
                        <input type="number" id="exercise-sets" min="1" max="10">
                    </div>
                    
                    <div class="input-group">
                        <label for="exercise-reps">Reps</label>
                        <input type="number" id="exercise-reps" min="1" max="100">
                    </div>
                    
                    <div class="input-group">
                        <label for="exercise-weight">Weight (lbs)</label>
                        <input type="number" id="exercise-weight" min="0" step="2.5">
                    </div>
                </div>
                
                <div class="exercise-status">
                    <label>Status</label>
                    <div class="status-buttons">
                        <button data-status="incomplete" class="status-btn status-incomplete">Incomplete</button>
                        <button data-status="complete" class="status-btn status-complete">Completed</button>
                    </div>
                </div>
                
                <div class="exercise-replacement">
                    <label for="replacement-toggle">Replace this exercise</label>
                    <div class="replacement-toggle">
                        <input type="checkbox" id="replacement-toggle">
                        <label for="replacement-toggle" class="toggle-switch"></label>
                    </div>
                    
                    <div id="replacement-container" class="replacement-container hidden">
                        <div class="input-group">
                            <label for="replacement-select">Select Alternative</label>
                            <select id="replacement-select"></select>
                        </div>
                    </div>
                </div>
                
                <div class="exercise-notes">
                    <label for="exercise-notes">Notes</label>
                    <textarea id="exercise-notes" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button id="save-exercise" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentWorkout = null;
    let currentExercise = null;
    let currentExerciseElement = null;
    let allAlternatives = {};
    const datePicker = document.getElementById('date-picker');
    const dateDisplay = document.getElementById('date-display');
    
    document.addEventListener('DOMContentLoaded', function() {
        // Load initial workout
        loadWorkout(datePicker.value);
        
        // Date navigation
        document.getElementById('prev-date').addEventListener('click', () => {
            const date = new Date(datePicker.value);
            date.setDate(date.getDate() - 1);
            datePicker.value = date.toISOString().split('T')[0];
            dateDisplay.textContent = datePicker.value;
            loadWorkout(datePicker.value);
        });
        
        document.getElementById('next-date').addEventListener('click', () => {
            const date = new Date(datePicker.value);
            date.setDate(date.getDate() + 1);
            datePicker.value = date.toISOString().split('T')[0];
            dateDisplay.textContent = datePicker.value;
            loadWorkout(datePicker.value);
        });
        
        // Date picker change
        datePicker.addEventListener('change', () => {
            dateDisplay.textContent = datePicker.value;
            loadWorkout(datePicker.value);
        });
        
        dateDisplay.addEventListener('click', () => {
            dateDisplay.style.display = 'none';
            datePicker.style.display = 'block';
            datePicker.focus();
        });
        
        datePicker.addEventListener('blur', () => {
            datePicker.style.display = 'none';
            dateDisplay.style.display = 'block';
        });
        
        // Workout actions
        document.getElementById('mark-complete').addEventListener('click', () => {
            if (!currentWorkout) return;
            
            updateWorkoutStatus('complete');
        });
        
        document.getElementById('mark-skipped').addEventListener('click', () => {
            if (!currentWorkout) return;
            
            updateWorkoutStatus('skipped');
        });
        
        // Modal events
        document.querySelector('.modal-close').addEventListener('click', closeModal);
        
        document.getElementById('replacement-toggle').addEventListener('change', function() {
            const replacementContainer = document.getElementById('replacement-container');
            if (this.checked) {
                replacementContainer.classList.remove('hidden');
                loadAlternatives(currentExercise.id);
            } else {
                replacementContainer.classList.add('hidden');
            }
        });
        
        document.getElementById('save-exercise').addEventListener('click', saveExerciseChanges);
    });
    
    async function loadWorkout(date) {
        try {
            const response = await fetch(`/workout/get?date=${date}`);
            const data = await response.json();
            
            if (!data.workout) {
                showWorkoutError('No workout found for this date');
                return;
            }
            
            currentWorkout = data.workout;
            renderWorkout(currentWorkout);
        } catch (error) {
            console.error('Error loading workout:', error);
            showWorkoutError('Error loading workout data');
        }
    }
    
    function renderWorkout(workout) {
        // Update workout info
        const workoutInfo = document.getElementById('workout-info');
        
        if (workout.type === 'rest') {
            workoutInfo.innerHTML = `
                <div class="rest-day">
                    <h2>Rest Day</h2>
                    <p>Take a day off to let your body recover.</p>
                </div>
            `;
            
            document.getElementById('exercises-container').innerHTML = '';
            document.getElementById('mark-complete').disabled = true;
            document.getElementById('mark-skipped').disabled = true;
            
            return;
        }
        
        document.getElementById('mark-complete').disabled = false;
        document.getElementById('mark-skipped').disabled = false;
        
        // Set workout type and status
        const statusClass = workout.status === 'complete' ? 'status-complete' : 
                          workout.status === 'skipped' ? 'status-skipped' : 'status-incomplete';
        
        workoutInfo.innerHTML = `
            <div class="workout-type ${workout.type}-day">
                ${workout.type.toUpperCase()} DAY
            </div>
            <div class="workout-status ${statusClass}">
                ${workout.status ? workout.status.toUpperCase() : 'INCOMPLETE'}
            </div>
        `;
        
        // Render exercises
        const exercisesContainer = document.getElementById('exercises-container');
        exercisesContainer.innerHTML = '';
        
        if (!workout.exercises || workout.exercises.length === 0) {
            exercisesContainer.innerHTML = '<p class="no-exercises">No exercises for this workout</p>';
            return;
        }
        
        workout.exercises.forEach(exercise => {
            const exerciseElement = document.createElement('div');
            exerciseElement.className = `exercise-card status-${exercise.status || 'incomplete'}`;
            exerciseElement.dataset.exerciseId = exercise.id;
            
            let exerciseName = exercise.name;
            if (exercise.replacement_name) {
                exerciseName = `${exercise.replacement_name} <span class="replaced-text">(replaced)</span>`;
            }
            
            exerciseElement.innerHTML = `
                <div class="exercise-header">
                    <h3>${exerciseName}</h3>
                    <div class="exercise-muscle-group">${exercise.muscle_group}</div>
                </div>
                
                <div class="exercise-details">
                    <div class="detail-item">
                        <span class="detail-label">Sets</span>
                        <span class="detail-value">${exercise.sets || 3}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Reps</span>
                        <span class="detail-value">${exercise.reps || 10}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Weight</span>
                        <span class="detail-value">${exercise.weight ? exercise.weight + ' lbs' : '—'}</span>
                    </div>
                </div>
                
                <div class="exercise-status">
                    <span class="status-indicator ${exercise.status || 'incomplete'}"></span>
                    <span class="status-text">${exercise.status ? exercise.status.toUpperCase() : 'INCOMPLETE'}</span>
                </div>
                
                <div class="exercise-actions">
                    <button class="btn-icon edit-exercise" title="Edit Exercise">
                        <i class="fas fa-edit"></i>
                    </button>
                </div>
            `;
            
            // Add event listeners
            exerciseElement.querySelector('.edit-exercise').addEventListener('click', () => {
                openExerciseModal(exercise, exerciseElement);
            });
            
            exercisesContainer.appendChild(exerciseElement);
        });
    }
    
    function showWorkoutError(message) {
        document.getElementById('workout-info').innerHTML = `
            <div class="workout-error">
                <i class="fas fa-exclamation-circle"></i>
                <span>${message}</span>
            </div>
        `;
        
        document.getElementById('exercises-container').innerHTML = '';
        document.getElementById('mark-complete').disabled = true;
        document.getElementById('mark-skipped').disabled = true;
    }
    
    async function updateWorkoutStatus(status) {
        try {
            const response = await fetch(`/workout/${currentWorkout.id}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status })
            });
            
            if (!response.ok) {
                throw new Error('Failed to update workout status');
            }
            
            // Reload workout data
            loadWorkout(datePicker.value);
        } catch (error) {
            console.error('Error updating workout status:', error);
            alert('Error updating workout status');
        }
    }
    
    function openExerciseModal(exercise, exerciseElement) {
        currentExercise = exercise;
        currentExerciseElement = exerciseElement;
        
        // Populate modal fields
        document.getElementById('modal-exercise-name').textContent = exercise.replacement_name || exercise.name;
        document.getElementById('exercise-sets').value = exercise.sets || 3;
        document.getElementById('exercise-reps').value = exercise.reps || 10;
        document.getElementById('exercise-weight').value = exercise.weight || '';
        document.getElementById('exercise-notes').value = exercise.notes || '';
        
        // Set status buttons
        const statusButtons = document.querySelectorAll('.status-btn');
        statusButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.status === (exercise.status || 'incomplete')) {
                btn.classList.add('active');
            }
        });
        
        // Reset replacement toggle
        const replacementToggle = document.getElementById('replacement-toggle');
        replacementToggle.checked = !!exercise.replacement_name;
        
        const replacementContainer = document.getElementById('replacement-container');
        if (exercise.replacement_name) {
            replacementContainer.classList.remove('hidden');
            // We'll load alternatives after opening the modal
        } else {
            replacementContainer.classList.add('hidden');
        }
        
        // Show modal
        document.getElementById('exercise-modal').style.display = 'flex';
        
        // Load alternatives if replacement is active
        if (replacementToggle.checked) {
            loadAlternatives(exercise.id);
        }
        
        // Add event listeners to status buttons
        statusButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                statusButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
            });
        });
    }
    
    function closeModal() {
        document.getElementById('exercise-modal').style.display = 'none';
    }
    
    async function loadAlternatives(exerciseId) {
        // Check if we already loaded alternatives for this exercise
        if (allAlternatives[exerciseId]) {
            populateAlternativesDropdown(allAlternatives[exerciseId]);
            return;
        }
        
        try {
            const response = await fetch(`/workout/exercise/${exerciseId}/alternatives`);
            const data = await response.json();
            
            if (!data.alternatives) {
                console.error('No alternatives found');
                return;
            }
            
            allAlternatives[exerciseId] = data.alternatives;
            populateAlternativesDropdown(data.alternatives);
        } catch (error) {
            console.error('Error loading alternatives:', error);
        }
    }
    
    function populateAlternativesDropdown(alternatives) {
        const select = document.getElementById('replacement-select');
        select.innerHTML = '';
        
        alternatives.forEach(alt => {
            const option = document.createElement('option');
            option.value = alt.id;
            option.textContent = alt.name;
            
            // If this is the currently selected replacement, select it
            if (currentExercise.replacement_name === alt.name) {
                option.selected = true;
            }
            
            select.appendChild(option);
        });
    }
    
    async function saveExerciseChanges() {
        const sets = parseInt(document.getElementById('exercise-sets').value) || 3;
        const reps = parseInt(document.getElementById('exercise-reps').value) || 10;
        const weight = parseFloat(document.getElementById('exercise-weight').value) || null;
        const notes = document.getElementById('exercise-notes').value;
        
        const activeStatusBtn = document.querySelector('.status-btn.active');
        const status = activeStatusBtn ? activeStatusBtn.dataset.status : 'incomplete';
        
        const replacementToggle = document.getElementById('replacement-toggle');
        let replacementExerciseId = null;
        
        if (replacementToggle.checked) {
            const replacementSelect = document.getElementById('replacement-select');
            replacementExerciseId = parseInt(replacementSelect.value);
        }
        
        try {
            const response = await fetch(`/workout/exercise/${currentExercise.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sets,
                    reps,
                    weight,
                    status,
                    replacementExerciseId,
                    notes
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to update exercise');
            }
            
            // Update UI without reloading
            updateExerciseUI(sets, reps, weight, status, replacementExerciseId);
            
            // Close modal
            closeModal();
        } catch (error) {
            console.error('Error updating exercise:', error);
            alert('Error updating exercise');
        }
    }
    
    function updateExerciseUI(sets, reps, weight, status, replacementExerciseId) {
        // Update current exercise object
        currentExercise.sets = sets;
        currentExercise.reps = reps;
        currentExercise.weight = weight;
        currentExercise.status = status;
        
        if (replacementExerciseId) {
            const replacement = allAlternatives[currentExercise.id].find(a => a.id === replacementExerciseId);
            if (replacement) {
                currentExercise.replacement_name = replacement.name;
            }
        } else {
            currentExercise.replacement_name = null;
        }
        
        // Update UI element
        currentExerciseElement.className = `exercise-card status-${status}`;
        
        let exerciseName = currentExercise.name;
        if (currentExercise.replacement_name) {
            exerciseName = `${currentExercise.replacement_name} <span class="replaced-text">(replaced)</span>`;
        }
        
        currentExerciseElement.querySelector('h3').innerHTML = exerciseName;
        currentExerciseElement.querySelector('.detail-value:nth-child(2)').textContent = sets;
        currentExerciseElement.querySelector('.detail-value:nth-child(4)').textContent = reps;
        currentExerciseElement.querySelector('.detail-value:nth-child(6)').textContent = weight ? weight + ' lbs' : '—';
        
        const statusIndicator = currentExerciseElement.querySelector('.status-indicator');
        statusIndicator.className = `status-indicator ${status}`;
        
        const statusText = currentExerciseElement.querySelector('.status-text');
        statusText.textContent = status.toUpperCase();
    }
</script>