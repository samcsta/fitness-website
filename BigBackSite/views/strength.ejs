<%- contentFor('body') %>

<div class="strength-container">
    <div class="strength-header">
        <h1>Strength Tracker</h1>
        <div class="strength-filters">
            <div class="filter-group">
                <label for="category-filter">Category:</label>
                <select id="category-filter">
                    <option value="all">All Categories</option>
                    <option value="push">Push</option>
                    <option value="pull">Pull</option>
                    <option value="legs">Legs</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="muscle-filter">Muscle Group:</label>
                <select id="muscle-filter">
                    <option value="all">All Muscle Groups</option>
                </select>
            </div>
            
            <div class="search-group">
                <input type="text" id="exercise-search" placeholder="Search exercises...">
                <button id="search-btn" class="btn-icon">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="exercises-grid" id="exercises-grid">
        <div class="loading-container">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Loading exercises...</span>
        </div>
    </div>
    
    <!-- Exercise History Modal -->
    <div id="history-modal" class="modal">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <h2 id="history-exercise-name">Exercise History</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="history-tabs">
                    <button class="history-tab active" data-tab="progress">Progress Chart</button>
                    <button class="history-tab" data-tab="history">History Log</button>
                </div>
                
                <div class="tab-content">
                    <div id="progress-tab" class="tab-pane active">
                        <div class="chart-container">
                            <canvas id="progress-chart"></canvas>
                        </div>
                    </div>
                    
                    <div id="history-tab" class="tab-pane">
                        <div class="history-log" id="history-log">
                            <table class="history-table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Weight</th>
                                        <th>Sets</th>
                                        <th>Reps</th>
                                    </tr>
                                </thead>
                                <tbody id="history-tbody">
                                    <!-- History entries will be inserted here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                
                <div class="exercise-stats">
                    <div class="stat-item">
                        <h3>Max Weight</h3>
                        <p id="max-weight">N/A</p>
                    </div>
                    
                    <div class="stat-item">
                        <h3>Last Used</h3>
                        <p id="last-used">N/A</p>
                    </div>
                    
                    <div class="stat-item">
                        <h3>Progress</h3>
                        <p id="weight-progress">N/A</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let allExercises = [];
    let muscleGroups = [];
    let currentExercise = null;
    let exerciseHistory = {};
    
    document.addEventListener('DOMContentLoaded', function() {
        // Load all exercises
        loadExercises();
        
        // Setup filter event listeners
        document.getElementById('category-filter').addEventListener('change', filterExercises);
        document.getElementById('muscle-filter').addEventListener('change', filterExercises);
        
        // Setup search
        document.getElementById('search-btn').addEventListener('click', filterExercises);
        document.getElementById('exercise-search').addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                filterExercises();
            }
        });
        
        // Modal close button
        document.querySelector('.modal-close').addEventListener('click', function() {
            document.getElementById('history-modal').style.display = 'none';
        });
        
        // Tab switching
        document.querySelectorAll('.history-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs
                document.querySelectorAll('.history-tab').forEach(t => {
                    t.classList.remove('active');
                });
                
                // Add active class to clicked tab
                this.classList.add('active');
                
                // Hide all tab panes
                document.querySelectorAll('.tab-pane').forEach(pane => {
                    pane.classList.remove('active');
                });
                
                // Show the selected tab pane
                const tabId = this.dataset.tab;
                document.getElementById(`${tabId}-tab`).classList.add('active');
            });
        });
    });
    
    async function loadExercises() {
        try {
            const response = await fetch('/workout/exercises');
            const data = await response.json();
            
            if (!data.exercises) {
                throw new Error('No exercises found');
            }
            
            allExercises = data.exercises;
            
            // Extract unique muscle groups
            muscleGroups = [...new Set(allExercises.map(ex => ex.muscle_group))];
            
            // Populate muscle group filter
            const muscleFilter = document.getElementById('muscle-filter');
            muscleGroups.forEach(group => {
                const option = document.createElement('option');
                option.value = group;
                option.textContent = capitalizeWords(group);
                muscleFilter.appendChild(option);
            });
            
            // Display all exercises
            renderExercises(allExercises);
        } catch (error) {
            console.error('Error loading exercises:', error);
            document.getElementById('exercises-grid').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>Error loading exercises</span>
                </div>
            `;
        }
    }
    
    function filterExercises() {
        const category = document.getElementById('category-filter').value;
        const muscleGroup = document.getElementById('muscle-filter').value;
        const searchQuery = document.getElementById('exercise-search').value.toLowerCase();
        
        let filtered = [...allExercises];
        
        // Filter by category
        if (category !== 'all') {
            filtered = filtered.filter(ex => ex.category === category);
        }
        
        // Filter by muscle group
        if (muscleGroup !== 'all') {
            filtered = filtered.filter(ex => ex.muscle_group === muscleGroup);
        }
        
        // Filter by search query
        if (searchQuery) {
            filtered = filtered.filter(ex => ex.name.toLowerCase().includes(searchQuery));
        }
        
        renderExercises(filtered);
    }
    
    function renderExercises(exercises) {
        const grid = document.getElementById('exercises-grid');
        
        if (!exercises.length) {
            grid.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <p>No exercises found matching your filters</p>
                </div>
            `;
            return;
        }
        
        let html = '';
        
        // Group exercises by category for better organization
        const exercisesByCategory = {
            push: [],
            pull: [],
            legs: []
        };
        
        exercises.forEach(ex => {
            exercisesByCategory[ex.category].push(ex);
        });
        
        // Render each category
        for (const [category, categoryExercises] of Object.entries(exercisesByCategory)) {
            if (categoryExercises.length === 0) continue;
            
            html += `<div class="category-heading">${category.toUpperCase()}</div>`;
            
            // Group exercises by muscle group within each category
            const exercisesByMuscle = {};
            categoryExercises.forEach(ex => {
                if (!exercisesByMuscle[ex.muscle_group]) {
                    exercisesByMuscle[ex.muscle_group] = [];
                }
                exercisesByMuscle[ex.muscle_group].push(ex);
            });
            
            // Render each muscle group
            for (const [muscleGroup, muscleExercises] of Object.entries(exercisesByMuscle)) {
                if (muscleExercises.length === 0) continue;
                
                html += `<div class="muscle-heading">${capitalizeWords(muscleGroup)}</div>`;
                html += '<div class="exercise-row">';
                
                muscleExercises.forEach(exercise => {
                    html += `
                        <div class="exercise-card" data-exercise-id="${exercise.id}">
                            <div class="exercise-header">
                                <h3>${exercise.name}</h3>
                            </div>
                            <div class="exercise-info">
                                <span class="exercise-category">${exercise.category}</span>
                                <span class="exercise-muscle">${capitalizeWords(exercise.muscle_group)}</span>
                            </div>
                            <div class="exercise-actions">
                                <button class="btn view-history">View Progress</button>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
            }
        }
        
        grid.innerHTML = html;
        
        // Add event listeners
        document.querySelectorAll('.view-history').forEach(btn => {
            btn.addEventListener('click', function() {
                const exerciseId = parseInt(this.closest('.exercise-card').dataset.exerciseId);
                const exercise = allExercises.find(ex => ex.id === exerciseId);
                
                if (exercise) {
                    openHistoryModal(exercise);
                }
            });
        });
    }
    
    async function openHistoryModal(exercise) {
        currentExercise = exercise;
        
        // Update modal title
        document.getElementById('history-exercise-name').textContent = exercise.name;
        
        // Show loading state
        document.getElementById('history-tbody').innerHTML = `
            <tr>
                <td colspan="4" class="text-center">
                    <i class="fas fa-spinner fa-spin"></i> Loading history...
                </td>
            </tr>
        `;
        
        document.getElementById('max-weight').textContent = 'Loading...';
        document.getElementById('last-used').textContent = 'Loading...';
        document.getElementById('weight-progress').textContent = 'Loading...';
        
        // Clear previous chart if exists
        const chartContainer = document.getElementById('progress-chart').getContext('2d');
        if (window.progressChart) {
            window.progressChart.destroy();
        }
        
        // Show modal
        document.getElementById('history-modal').style.display = 'flex';
        
        // Load history data
        try {
            // Check if we already loaded this exercise's history
            if (!exerciseHistory[exercise.id]) {
                const response = await fetch(`/workout/exercise/${exercise.id}/history`);
                const data = await response.json();
                exerciseHistory[exercise.id] = data.history || [];
            }
            
            const history = exerciseHistory[exercise.id];
            
            // Render history
            renderExerciseHistory(history);
            
            // Initialize chart
            initProgressChart(history);
            
            // Update stats
            updateExerciseStats(history);
        } catch (error) {
            console.error('Error loading exercise history:', error);
            document.getElementById('history-tbody').innerHTML = `
                <tr>
                    <td colspan="4" class="text-center">
                        <i class="fas fa-exclamation-circle"></i> Error loading history
                    </td>
                </tr>
            `;
        }
    }
    
    function renderExerciseHistory(history) {
        const tbody = document.getElementById('history-tbody');
        
        if (!history || history.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="4" class="text-center">
                        No history data for this exercise
                    </td>
                </tr>
            `;
            return;
        }
        
        let html = '';
        
        // Sort by date, most recent first
        const sortedHistory = [...history].sort((a, b) => new Date(b.date) - new Date(a.date));
        
        sortedHistory.forEach(entry => {
            const date = new Date(entry.date).toLocaleDateString();
            
            html += `
                <tr>
                    <td>${date}</td>
                    <td>${entry.weight} lbs</td>
                    <td>${entry.sets}</td>
                    <td>${entry.reps}</td>
                </tr>
            `;
        });
        
        tbody.innerHTML = html;
    }
    
    function initProgressChart(history) {
        if (!history || history.length === 0) {
            // No data to chart
            return;
        }
        
        // Sort by date, oldest first for chart
        const sortedHistory = [...history].sort((a, b) => new Date(a.date) - new Date(b.date));
        
        const labels = sortedHistory.map(entry => new Date(entry.date).toLocaleDateString());
        const weights = sortedHistory.map(entry => entry.weight);
        
        const ctx = document.getElementById('progress-chart').getContext('2d');
        window.progressChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Weight (lbs)',
                    data: weights,
                    backgroundColor: 'rgba(74, 108, 247, 0.2)',
                    borderColor: 'rgba(74, 108, 247, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    pointBackgroundColor: 'rgba(74, 108, 247, 1)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        title: {
                            display: true,
                            text: 'Weight (lbs)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Date'
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            afterLabel: function(context) {
                                const index = context.dataIndex;
                                const entry = sortedHistory[index];
                                return `Sets: ${entry.sets}, Reps: ${entry.reps}`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    function updateExerciseStats(history) {
        if (!history || history.length === 0) {
            document.getElementById('max-weight').textContent = 'N/A';
            document.getElementById('last-used').textContent = 'N/A';
            document.getElementById('weight-progress').textContent = 'N/A';
            return;
        }
        
        // Calculate max weight
        const maxWeight = Math.max(...history.map(entry => entry.weight));
        document.getElementById('max-weight').textContent = `${maxWeight} lbs`;
        
        // Find most recent date
        const sortedHistory = [...history].sort((a, b) => new Date(b.date) - new Date(a.date));
        const lastUsed = new Date(sortedHistory[0].date).toLocaleDateString();
        document.getElementById('last-used').textContent = lastUsed;
        
        // Calculate progress (first vs last)
        if (history.length > 1) {
            const timeOrderedHistory = [...history].sort((a, b) => new Date(a.date) - new Date(b.date));
            const firstWeight = timeOrderedHistory[0].weight;
            const lastWeight = timeOrderedHistory[timeOrderedHistory.length - 1].weight;
            const weightDiff = lastWeight - firstWeight;
            const percentChange = ((weightDiff / firstWeight) * 100).toFixed(1);
            
            const progressText = weightDiff >= 0 ? 
                `+${weightDiff} lbs (${percentChange}%)` : 
                `${weightDiff} lbs (${percentChange}%)`;
            
            const progressEl = document.getElementById('weight-progress');
            progressEl.textContent = progressText;
            
            // Add color based on progress
            progressEl.className = '';
            if (weightDiff > 0) {
                progressEl.classList.add('positive-progress');
            } else if (weightDiff < 0) {
                progressEl.classList.add('negative-progress');
            }
        } else {
            document.getElementById('weight-progress').textContent = 'N/A';
        }
    }
    
    function capitalizeWords(str) {
        return str.replace(/\b\w/g, c => c.toUpperCase());
    }
</script>