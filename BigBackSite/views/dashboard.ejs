<%- contentFor('body') %>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Welcome, <%= user.firstName ? user.firstName : user.username %>!</h1>
        <p class="date-display"><%= new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
    </div>
    
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-weight"></i>
            </div>
            <div class="stat-content">
                <h3>Current Weight</h3>
                <p class="stat-value" id="current-weight"><%= user.currentWeight ? user.currentWeight + ' lbs' : 'Not set' %></p>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-fire"></i>
            </div>
            <div class="stat-content">
                <h3>Daily Calories</h3>
                <p class="stat-value" id="daily-calories">Loading...</p>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-drumstick-bite"></i>
            </div>
            <div class="stat-content">
                <h3>Daily Protein</h3>
                <p class="stat-value" id="daily-protein">Loading...</p>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-cookie"></i>
            </div>
            <div class="stat-content">
                <h3>Added Sugar</h3>
                <p class="stat-value" id="daily-sugar">Loading...</p>
            </div>
        </div>
    </div>
    
    <div class="dashboard-row">
        <div class="dashboard-col">
            <div class="card">
                <div class="card-header">
                    <h2>Weight Progress</h2>
                </div>
                <div class="card-body">
                    <canvas id="weight-chart"></canvas>
                </div>
            </div>
        </div>
        
        <div class="dashboard-col">
            <div class="card">
                <div class="card-header">
                    <h2>Workout Calendar</h2>
                </div>
                <div class="card-body">
                    <div id="workout-calendar" class="calendar"></div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="dashboard-row">
        <div class="dashboard-col">
            <div class="card">
                <div class="card-header">
                    <h2>Today's Workout</h2>
                    <a href="/workout" class="btn-link">View Details</a>
                </div>
                <div class="card-body">
                    <div id="today-workout">Loading...</div>
                </div>
            </div>
        </div>
        
        <div class="dashboard-col">
            <div class="card">
                <div class="card-header">
                    <h2>Recent Activity</h2>
                </div>
                <div class="card-body">
                    <div id="recent-activity" class="activity-feed">Loading...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load dashboard data
        loadDashboardData();
        
        // Initialize weight chart
        initWeightChart();
        
        // Initialize workout calendar
        initWorkoutCalendar();
    });
    
    async function loadDashboardData() {
        try {
            // Load nutrition summary
            const nutritionResponse = await fetch('/nutrition/summary');
            const nutritionData = await nutritionResponse.json();
            
            if (nutritionData.summary && nutritionData.summary.length > 0) {
                const latestData = nutritionData.summary[nutritionData.summary.length - 1];
                
                document.getElementById('daily-calories').textContent = 
                    latestData.total_calories ? `${latestData.total_calories} kcal` : 'No data';
                
                document.getElementById('daily-protein').textContent = 
                    latestData.total_protein ? `${latestData.total_protein} g` : 'No data';
                
                document.getElementById('daily-sugar').textContent = 
                    latestData.total_added_sugar ? `${latestData.total_added_sugar} g` : 'No data';
            } else {
                document.getElementById('daily-calories').textContent = 'No data';
                document.getElementById('daily-protein').textContent = 'No data';
                document.getElementById('daily-sugar').textContent = 'No data';
            }
            
            // Load today's workout
            const workoutResponse = await fetch('/workout/get');
            const workoutData = await workoutResponse.json();
            
            if (workoutData.workout) {
                const workout = workoutData.workout;
                let workoutHtml = '';
                
                if (workout.type === 'rest') {
                    workoutHtml = '<div class="rest-day">Rest Day</div>';
                } else {
                    workoutHtml = `
                        <div class="workout-type ${workout.type}">${workout.type.toUpperCase()} DAY</div>
                        <ul class="workout-preview">
                    `;
                    
                    // Add up to 3 exercises for preview
                    const previewExercises = workout.exercises.slice(0, 3);
                    previewExercises.forEach(exercise => {
                        workoutHtml += `<li>${exercise.name}</li>`;
                    });
                    
                    if (workout.exercises.length > 3) {
                        workoutHtml += `<li>+${workout.exercises.length - 3} more exercises</li>`;
                    }
                    
                    workoutHtml += '</ul>';
                }
                
                document.getElementById('today-workout').innerHTML = workoutHtml;
            } else {
                document.getElementById('today-workout').innerHTML = 'No workout scheduled';
            }
            
            // Load recent activity
            loadRecentActivity();
            
        } catch (error) {
            console.error('Error loading dashboard data:', error);
        }
    }
    
    async function initWeightChart() {
        try {
            const response = await fetch('/nutrition/weight/history?limit=30');
            const data = await response.json();
            
            if (!data.history || data.history.length === 0) {
                document.getElementById('weight-chart').innerHTML = '<div class="no-data">No weight data available</div>';
                return;
            }
            
            // Format data for chart
            const dates = data.history.map(entry => new Date(entry.date).toLocaleDateString());
            const weights = data.history.map(entry => entry.weight);
            
            // Create chart
            const ctx = document.getElementById('weight-chart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates.reverse(), // Show oldest to newest
                    datasets: [{
                        label: 'Weight (lbs)',
                        data: weights.reverse(),
                        backgroundColor: 'rgba(74, 108, 247, 0.2)',
                        borderColor: 'rgba(74, 108, 247, 1)',
                        borderWidth: 2,
                        tension: 0.3,
                        pointBackgroundColor: 'rgba(74, 108, 247, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        } catch (error) {
            console.error('Error initializing weight chart:', error);
            document.getElementById('weight-chart').innerHTML = '<div class="error">Error loading weight data</div>';
        }
    }
    
    async function initWorkoutCalendar() {
        try {
            const response = await fetch('/workout/history?limit=60');
            const data = await response.json();
            
            if (!data.history) {
                document.getElementById('workout-calendar').innerHTML = '<div class="no-data">No workout data available</div>';
                return;
            }
            
            // Create workout status map
            const workoutMap = {};
            data.history.forEach(workout => {
                workoutMap[workout.date] = workout.status;
            });
            
            // Generate calendar HTML
            const today = new Date();
            const calendarHtml = generateCalendarHtml(today, workoutMap);
            
            document.getElementById('workout-calendar').innerHTML = calendarHtml;
        } catch (error) {
            console.error('Error initializing workout calendar:', error);
            document.getElementById('workout-calendar').innerHTML = '<div class="error">Error loading calendar data</div>';
        }
    }
    
    function generateCalendarHtml(date, workoutMap) {
        const year = date.getFullYear();
        const month = date.getMonth();
        
        // Get first day of month and number of days
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 
                           'July', 'August', 'September', 'October', 'November', 'December'];
                           
        let html = `
            <div class="calendar-header">
                <span>${monthNames[month]} ${year}</span>
            </div>
            <div class="calendar-body">
                <div class="calendar-row days">
                    <div class="calendar-day-head">Sun</div>
                    <div class="calendar-day-head">Mon</div>
                    <div class="calendar-day-head">Tue</div>
                    <div class="calendar-day-head">Wed</div>
                    <div class="calendar-day-head">Thu</div>
                    <div class="calendar-day-head">Fri</div>
                    <div class="calendar-day-head">Sat</div>
                </div>
                <div class="calendar-row">
        `;
        
        // Fill in blanks for days before first of month
        for (let i = 0; i < firstDay; i++) {
            html += '<div class="calendar-day empty"></div>';
        }
        
        // Fill in days of month
        for (let day = 1; day <= daysInMonth; day++) {
            if ((day + firstDay - 1) % 7 === 0 && day !== 1) {
                html += '</div><div class="calendar-row">';
            }
            
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const workoutStatus = workoutMap[dateStr];
            
            let statusClass = '';
            if (workoutStatus === 'complete') {
                statusClass = 'workout-complete';
            } else if (workoutStatus === 'incomplete') {
                statusClass = 'workout-incomplete';
            } else if (workoutStatus === 'skipped') {
                statusClass = 'workout-skipped';
            }
            
            // Highlight today
            const isToday = day === new Date().getDate() && 
                            month === new Date().getMonth() && 
                            year === new Date().getFullYear();
            
            html += `
                <div class="calendar-day ${isToday ? 'today' : ''} ${statusClass}">
                    <div class="day-number">${day}</div>
                </div>
            `;
        }
        
        // Fill in blanks after last day
        const lastDayIndex = (firstDay + daysInMonth - 1) % 7;
        for (let i = lastDayIndex; i < 6; i++) {
            html += '<div class="calendar-day empty"></div>';
        }
        
        html += '</div></div>';
        
        return html;
    }
    
    async function loadRecentActivity() {
        try {
            // Get workout history
            const workoutResponse = await fetch('/workout/history?limit=5');
            const workoutData = await workoutResponse.json();
            
            // Get food log entries
            const today = new Date().toISOString().split('T')[0];
            const foodResponse = await fetch(`/nutrition/food?date=${today}`);
            const foodData = await foodResponse.json();
            
            let activityHtml = '<ul class="activity-list">';
            
            // Add workout activity
            if (workoutData.history && workoutData.history.length > 0) {
                workoutData.history.forEach(workout => {
                    const workoutDate = new Date(workout.date).toLocaleDateString();
                    const statusText = workout.status === 'complete' ? 'Completed' : 
                                       workout.status === 'incomplete' ? 'Started' : 'Skipped';
                    
                    activityHtml += `
                        <li class="activity-item">
                            <div class="activity-icon ${workout.status}">
                                <i class="fas fa-dumbbell"></i>
                            </div>
                            <div class="activity-content">
                                <p>${statusText} ${workout.workout_type.toUpperCase()} workout</p>
                                <span class="activity-date">${workoutDate}</span>
                            </div>
                        </li>
                    `;
                });
            }
            
            // Add food log activity
            if (foodData.entries && foodData.entries.length > 0) {
                // Group by time periods
                const meals = groupFoodEntriesByTime(foodData.entries);
                
                Object.keys(meals).forEach(mealTime => {
                    const entries = meals[mealTime];
                    const totalCalories = entries.reduce((sum, entry) => sum + (entry.calories || 0), 0);
                    
                    activityHtml += `
                        <li class="activity-item">
                            <div class="activity-icon food">
                                <i class="fas fa-utensils"></i>
                            </div>
                            <div class="activity-content">
                                <p>Logged ${mealTime} - ${totalCalories} calories</p>
                                <span class="activity-date">Today</span>
                            </div>
                        </li>
                    `;
                });
            }
            
            if (activityHtml === '<ul class="activity-list">') {
                activityHtml += '<li class="no-activity">No recent activity</li>';
            }
            
            activityHtml += '</ul>';
            
            document.getElementById('recent-activity').innerHTML = activityHtml;
        } catch (error) {
            console.error('Error loading recent activity:', error);
            document.getElementById('recent-activity').innerHTML = '<div class="error">Error loading activity data</div>';
        }
    }
    
    function groupFoodEntriesByTime(entries) {
        const meals = {};
        
        entries.forEach(entry => {
            const time = new Date(`2000-01-01T${entry.time}`);
            let mealTime;
            
            if (time.getHours() < 10) {
                mealTime = 'Breakfast';
            } else if (time.getHours() < 14) {
                mealTime = 'Lunch';
            } else if (time.getHours() < 18) {
                mealTime = 'Snack';
            } else {
                mealTime = 'Dinner';
            }
            
            if (!meals[mealTime]) {
                meals[mealTime] = [];
            }
            
            meals[mealTime].push(entry);
        });
        
        return meals;
    }
</script>