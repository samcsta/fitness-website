<%- contentFor('body') %>

<div class="food-container">
    <div class="food-header">
        <div class="date-selector">
            <button id="prev-date" class="btn-icon"><i class="fas fa-chevron-left"></i></button>
            <div id="current-date" class="current-date">
                <span id="date-display"><%= date %></span>
                <input type="date" id="date-picker" value="<%= date %>">
            </div>
            <button id="next-date" class="btn-icon"><i class="fas fa-chevron-right"></i></button>
        </div>
        
        <div class="food-actions">
            <button id="log-weight-btn" class="btn btn-secondary">Log Weight</button>
            <button id="add-food-btn" class="btn btn-primary">Add Food</button>
        </div>
    </div>
    
    <div class="nutrition-summary">
        <div class="summary-card">
            <div class="summary-icon">
                <i class="fas fa-fire"></i>
            </div>
            <div class="summary-content">
                <h3>Total Calories</h3>
                <p class="summary-value" id="total-calories">0 kcal</p>
            </div>
        </div>
        
        <div class="summary-card">
            <div class="summary-icon">
                <i class="fas fa-drumstick-bite"></i>
            </div>
            <div class="summary-content">
                <h3>Total Protein</h3>
                <p class="summary-value" id="total-protein">0 g</p>
            </div>
        </div>
        
        <div class="summary-card">
            <div class="summary-icon">
                <i class="fas fa-cookie"></i>
            </div>
            <div class="summary-content">
                <h3>Added Sugar</h3>
                <p class="summary-value" id="total-sugar">0 g</p>
            </div>
        </div>
        
        <div class="summary-card">
            <div class="summary-icon">
                <i class="fas fa-weight"></i>
            </div>
            <div class="summary-content">
                <h3>Current Weight</h3>
                <p class="summary-value" id="current-weight"><%= user.currentWeight ? user.currentWeight + ' lbs' : 'Not set' %></p>
            </div>
        </div>
    </div>
    
    <div class="food-timeline">
        <div class="timeline-header">
            <h2>Food Log</h2>
        </div>
        
        <div id="food-log" class="food-log">
            <div class="loading-indicator">
                <i class="fas fa-spinner fa-spin"></i>
                <span>Loading food entries...</span>
            </div>
        </div>
    </div>
    
    <!-- Log Weight Modal -->
    <div id="weight-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Log Weight</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="input-group">
                    <label for="weight-input">Weight (lbs)</label>
                    <input type="number" id="weight-input" min="50" max="500" step="0.1">
                </div>
                
                <div class="input-group">
                    <label for="weight-date">Date</label>
                    <input type="date" id="weight-date">
                </div>
            </div>
            <div class="modal-footer">
                <button id="save-weight" class="btn btn-primary">Save Weight</button>
            </div>
        </div>
    </div>
    
    <!-- Add Food Modal -->
    <div id="food-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add Food</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="food-search">
                    <div class="input-group">
                        <label for="food-search-input">Search Food</label>
                        <input type="text" id="food-search-input" placeholder="Search for a food...">
                    </div>
                    
                    <div id="search-results" class="search-results"></div>
                </div>
                
                <div id="food-details" class="food-details hidden">
                    <h3 id="selected-food-name">Food Name</h3>
                    
                    <div class="input-group">
                        <label for="food-servings">Servings</label>
                        <input type="number" id="food-servings" min="0.25" max="10" step="0.25" value="1">
                    </div>
                    
                    <div class="input-group">
                        <label for="food-calories">Calories</label>
                        <input type="number" id="food-calories" min="0">
                    </div>
                    
                    <div class="input-group">
                        <label for="food-protein">Protein (g)</label>
                        <input type="number" id="food-protein" min="0" step="0.1">
                    </div>
                    
                    <div class="input-group">
                        <label for="food-time">Time</label>
                        <input type="time" id="food-time">
                    </div>
                    
                    <div class="input-group">
                        <label for="food-notes">Notes</label>
                        <textarea id="food-notes" rows="2"></textarea>
                    </div>
                </div>
                
                <div id="new-food" class="new-food hidden">
                    <h3>Add New Food</h3>
                    
                    <div class="input-group">
                        <label for="new-food-name">Food Name</label>
                        <input type="text" id="new-food-name">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-calories">Calories</label>
                        <input type="number" id="new-food-calories" min="0">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-protein">Protein (g)</label>
                        <input type="number" id="new-food-protein" min="0" step="0.1">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-carbs">Carbs (g)</label>
                        <input type="number" id="new-food-carbs" min="0" step="0.1">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-fat">Fat (g)</label>
                        <input type="number" id="new-food-fat" min="0" step="0.1">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-sugar">Added Sugar (g)</label>
                        <input type="number" id="new-food-sugar" min="0" step="0.1">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-food-serving">Serving Size</label>
                        <input type="text" id="new-food-serving" placeholder="e.g., 1 cup, 100g">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="add-new-food-btn" class="btn btn-secondary">Add New Food</button>
                <button id="save-food" class="btn btn-primary" disabled>Add to Log</button>
            </div>
        </div>
    </div>
    
    <!-- Edit Food Modal -->
    <div id="edit-food-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Food Entry</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <h3 id="edit-food-name">Food Name</h3>
                
                <div class="input-group">
                    <label for="edit-food-servings">Servings</label>
                    <input type="number" id="edit-food-servings" min="0.25" max="10" step="0.25" value="1">
                </div>
                
                <div class="input-group">
                    <label for="edit-food-calories">Calories</label>
                    <input type="number" id="edit-food-calories" min="0">
                </div>
                
                <div class="input-group">
                    <label for="edit-food-protein">Protein (g)</label>
                    <input type="number" id="edit-food-protein" min="0" step="0.1">
                </div>
                
                <div class="input-group">
                    <label for="edit-food-time">Time</label>
                    <input type="time" id="edit-food-time">
                </div>
                
                <div class="input-group">
                    <label for="edit-food-notes">Notes</label>
                    <textarea id="edit-food-notes" rows="2"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button id="delete-food" class="btn btn-danger">Delete</button>
                <button id="update-food" class="btn btn-primary">Update</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentDate = '<%= date %>';
    let currentSelectedFood = null;
    let currentEditingFood = null;
    let foodEntries = [];
    let foodSearchTimeout = null;
    
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize date
        const datePicker = document.getElementById('date-picker');
        const dateDisplay = document.getElementById('date-display');
        
        // Load initial food log
        loadFoodLog(currentDate);
        
        // Date navigation
        document.getElementById('prev-date').addEventListener('click', () => {
            const date = new Date(datePicker.value);
            date.setDate(date.getDate() - 1);
            datePicker.value = date.toISOString().split('T')[0];
            currentDate = datePicker.value;
            dateDisplay.textContent = currentDate;
            loadFoodLog(currentDate);
        });
        
        document.getElementById('next-date').addEventListener('click', () => {
            const date = new Date(datePicker.value);
            date.setDate(date.getDate() + 1);
            datePicker.value = date.toISOString().split('T')[0];
            currentDate = datePicker.value;
            dateDisplay.textContent = currentDate;
            loadFoodLog(currentDate);
        });
        
        // Date picker change
        datePicker.addEventListener('change', () => {
            currentDate = datePicker.value;
            dateDisplay.textContent = currentDate;
            loadFoodLog(currentDate);
        });
        
        dateDisplay.addEventListener('click', () => {
            dateDisplay.style.display = 'none';
            datePicker.style.display = 'block';
            datePicker.focus();
        });
        
        datePicker.addEventListener('blur', () => {
            datePicker.style.display = 'none';
            dateDisplay.style.display = 'block';
        });
        
        // Log weight button
        document.getElementById('log-weight-btn').addEventListener('click', openWeightModal);
        
        // Add food button
        document.getElementById('add-food-btn').addEventListener('click', openFoodModal);
        
        // Close modal buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', function() {
                const modal = this.closest('.modal');
                modal.style.display = 'none';
            });
        });
        
        // Food search input
        const foodSearchInput = document.getElementById('food-search-input');
        foodSearchInput.addEventListener('input', function() {
            clearTimeout(foodSearchTimeout);
            const query = this.value.trim();
            
            if (query.length >= 3) {
                foodSearchTimeout = setTimeout(() => {
                    searchFoods(query);
                }, 500);
            } else {
                document.getElementById('search-results').innerHTML = '';
            }
        });
        
        // Add new food toggle
        document.getElementById('add-new-food-btn').addEventListener('click', function() {
            const newFoodSection = document.getElementById('new-food');
            const foodSearchSection = document.querySelector('.food-search');
            const foodDetailsSection = document.getElementById('food-details');
            
            if (newFoodSection.classList.contains('hidden')) {
                // Switch to new food form
                newFoodSection.classList.remove('hidden');
                foodSearchSection.classList.add('hidden');
                foodDetailsSection.classList.add('hidden');
                
                this.textContent = 'Back to Search';
                document.getElementById('save-food').disabled = false;
            } else {
                // Switch back to search
                newFoodSection.classList.add('hidden');
                foodSearchSection.classList.remove('hidden');
                
                this.textContent = 'Add New Food';
                
                if (!currentSelectedFood) {
                    document.getElementById('save-food').disabled = true;
                }
            }
        });
        
        // Save weight button
        document.getElementById('save-weight').addEventListener('click', saveWeight);
        
        // Save food button
        document.getElementById('save-food').addEventListener('click', saveFood);
        
        // Update food button
        document.getElementById('update-food').addEventListener('click', updateFood);
        
        // Delete food button
        document.getElementById('delete-food').addEventListener('click', deleteFood);
        
        // Set default time in food modal
        setDefaultFoodTime();
    });
    
    function setDefaultFoodTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const currentTime = `${hours}:${minutes}`;
        
        document.getElementById('food-time').value = currentTime;
        
        // Also set default date for weight modal
        document.getElementById('weight-date').value = currentDate;
    }
    
    async function loadFoodLog(date) {
        try {
            const response = await fetch(`/nutrition/food?date=${date}`);
            const data = await response.json();
            
            foodEntries = data.entries || [];
            
            // Group entries by time periods
            const mealGroups = groupEntriesByTime(foodEntries);
            
            renderFoodLog(mealGroups);
            updateNutritionSummary(foodEntries);
        } catch (error) {
            console.error('Error loading food log:', error);
            document.getElementById('food-log').innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>Error loading food log</span>
                </div>
            `;
        }
    }
    
    function groupEntriesByTime(entries) {
        if (!entries.length) return {};
        
        const groups = {
            'Morning': [],
            'Midday': [],
            'Afternoon': [],
            'Evening': []
        };
        
        entries.forEach(entry => {
            const time = new Date(`2000-01-01T${entry.time}`);
            const hour = time.getHours();
            
            if (hour < 10) {
                groups['Morning'].push(entry);
            } else if (hour < 13) {
                groups['Midday'].push(entry);
            } else if (hour < 17) {
                groups['Afternoon'].push(entry);
            } else {
                groups['Evening'].push(entry);
            }
        });
        
        // Remove empty groups
        Object.keys(groups).forEach(key => {
            if (groups[key].length === 0) {
                delete groups[key];
            }
        });
        
        return groups;
    }
    
    function renderFoodLog(mealGroups) {
        const foodLog = document.getElementById('food-log');
        
        if (Object.keys(mealGroups).length === 0) {
            foodLog.innerHTML = `
                <div class="empty-log">
                    <i class="fas fa-utensils"></i>
                    <p>No food entries for this day</p>
                    <button id="add-first-food" class="btn btn-primary">Add First Food</button>
                </div>
            `;
            
            document.getElementById('add-first-food').addEventListener('click', openFoodModal);
            return;
        }
        
        let html = '';
        
        for (const [mealName, entries] of Object.entries(mealGroups)) {
            html += `
                <div class="meal-group">
                    <h3 class="meal-name">${mealName}</h3>
                    <div class="meal-entries">
            `;
            
            entries.forEach(entry => {
                const time = new Date(`2000-01-01T${entry.time}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                html += `
                    <div class="food-entry" data-entry-id="${entry.id}">
                        <div class="food-entry-time">${time}</div>
                        <div class="food-entry-content">
                            <div class="food-entry-name">${entry.name}</div>
                            <div class="food-entry-details">
                                <span class="food-entry-servings">${entry.servings} serving${entry.servings !== 1 ? 's' : ''}</span>
                                <span class="food-entry-calories">${entry.calories} kcal</span>
                                <span class="food-entry-protein">${entry.protein || 0}g protein</span>
                            </div>
                            ${entry.notes ? `<div class="food-entry-notes">${entry.notes}</div>` : ''}
                        </div>
                        <div class="food-entry-actions">
                            <button class="btn-icon edit-food-entry">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            html += `
                    </div>
                </div>
            `;
        }
        
        foodLog.innerHTML = html;
        
        // Add event listeners to edit buttons
        document.querySelectorAll('.edit-food-entry').forEach(btn => {
            btn.addEventListener('click', function() {
                const entryId = parseInt(this.closest('.food-entry').dataset.entryId);
                const entry = foodEntries.find(e => e.id === entryId);
                
                if (entry) {
                    openEditFoodModal(entry);
                }
            });
        });
    }
    
    function updateNutritionSummary(entries) {
        let totalCalories = 0;
        let totalProtein = 0;
        let totalSugar = 0;
        
        entries.forEach(entry => {
            totalCalories += entry.calories || 0;
            totalProtein += entry.protein || 0;
            totalSugar += (entry.added_sugar || 0) * (entry.servings || 1);
        });
        
        document.getElementById('total-calories').textContent = `${totalCalories} kcal`;
        document.getElementById('total-protein').textContent = `${totalProtein}g`;
        document.getElementById('total-sugar').textContent = `${totalSugar}g`;
    }
    
    function openWeightModal() {
        const modal = document.getElementById('weight-modal');
        modal.style.display = 'flex';
        
        // Set default date to current date
        document.getElementById('weight-date').value = currentDate;
        
        // Set current weight if available
        const currentWeightText = document.getElementById('current-weight').textContent;
        if (currentWeightText !== 'Not set') {
            const currentWeight = parseFloat(currentWeightText);
            document.getElementById('weight-input').value = currentWeight;
        } else {
            document.getElementById('weight-input').value = '';
        }
        
        // Focus on input
        document.getElementById('weight-input').focus();
    }
    
    async function saveWeight() {
        const weight = parseFloat(document.getElementById('weight-input').value);
        const date = document.getElementById('weight-date').value;
        
        if (!weight || isNaN(weight)) {
            alert('Please enter a valid weight');
            return;
        }
        
        try {
            const response = await fetch('/nutrition/weight', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    weight,
                    date
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to save weight');
            }
            
            // Update displayed weight
            document.getElementById('current-weight').textContent = `${weight} lbs`;
            
            // Close modal
            document.getElementById('weight-modal').style.display = 'none';
        } catch (error) {
            console.error('Error saving weight:', error);
            alert('Error saving weight');
        }
    }
    
    function openFoodModal() {
        // Reset modal
        document.getElementById('food-search-input').value = '';
        document.getElementById('search-results').innerHTML = '';
        document.getElementById('food-details').classList.add('hidden');
        document.getElementById('new-food').classList.add('hidden');
        document.querySelector('.food-search').classList.remove('hidden');
        document.getElementById('add-new-food-btn').textContent = 'Add New Food';
        document.getElementById('save-food').disabled = true;
        
        // Clear selected food
        currentSelectedFood = null;
        
        // Set default time
        setDefaultFoodTime();
        
        // Show modal
        document.getElementById('food-modal').style.display = 'flex';
        
        // Focus on search input
        document.getElementById('food-search-input').focus();
    }
    
    async function searchFoods(query) {
        const searchResults = document.getElementById('search-results');
        searchResults.innerHTML = '<div class="search-loading"><i class="fas fa-spinner fa-spin"></i> Searching...</div>';
        
        try {
            const response = await fetch(`/nutrition/food/search?q=${encodeURIComponent(query)}`);
            const data = await response.json();
            
            if (!data.items || data.items.length === 0) {
                searchResults.innerHTML = `
                    <div class="no-results">
                        <p>No foods found. Try a different search or add a new food.</p>
                        <button id="create-food-btn" class="btn btn-secondary">Create "${query}"</button>
                    </div>
                `;
                
                document.getElementById('create-food-btn').addEventListener('click', function() {
                    // Switch to new food form and pre-fill name
                    document.getElementById('new-food').classList.remove('hidden');
                    document.querySelector('.food-search').classList.add('hidden');
                    document.getElementById('add-new-food-btn').textContent = 'Back to Search';
                    document.getElementById('new-food-name').value = query;
                    document.getElementById('save-food').disabled = false;
                });
                
                return;
            }
            
            let resultsHtml = '<ul class="food-results">';
            
            data.items.forEach(item => {
                resultsHtml += `
                    <li class="food-result-item" data-food-id="${item.id}">
                        <div class="food-result-name">${item.name}</div>
                        <div class="food-result-details">
                            <span class="food-result-calories">${item.calories} kcal</span>
                            <span class="food-result-protein">${item.protein}g protein</span>
                        </div>
                    </li>
                `;
            });
            
            resultsHtml += '</ul>';
            searchResults.innerHTML = resultsHtml;
            
            // Add event listeners to results
            document.querySelectorAll('.food-result-item').forEach(item => {
                item.addEventListener('click', function() {
                    const foodId = parseInt(this.dataset.foodId);
                    const food = data.items.find(f => f.id === foodId);
                    
                    if (food) {
                        selectFood(food);
                    }
                });
            });
        } catch (error) {
            console.error('Error searching foods:', error);
            searchResults.innerHTML = '<div class="error-message">Error searching foods</div>';
        }
    }
    
    function selectFood(food) {
        currentSelectedFood = food;
        
        // Update food details section
        document.getElementById('selected-food-name').textContent = food.name;
        document.getElementById('food-calories').value = food.calories || 0;
        document.getElementById('food-protein').value = food.protein || 0;
        document.getElementById('food-servings').value = 1;
        document.getElementById('food-notes').value = '';
        
        // Show food details section
        document.getElementById('food-details').classList.remove('hidden');
        document.getElementById('save-food').disabled = false;
    }
    
    async function saveFood() {
        let foodItemId, name, calories, protein, addedSugar;
        let servings = 1;
        const time = document.getElementById('food-time').value;
        const notes = document.getElementById('food-notes').value;
        
        if (!time) {
            alert('Please select a time');
            return;
        }
        
        // Check if we're adding a new food or using an existing one
        if (document.getElementById('new-food').classList.contains('hidden')) {
            // Using existing food
            if (!currentSelectedFood) {
                alert('Please select a food item');
                return;
            }
            
            foodItemId = currentSelectedFood.id;
            calories = parseFloat(document.getElementById('food-calories').value) || 0;
            protein = parseFloat(document.getElementById('food-protein').value) || 0;
            servings = parseFloat(document.getElementById('food-servings').value) || 1;
            addedSugar = currentSelectedFood.added_sugar || 0;
        } else {
            // Creating new food
            name = document.getElementById('new-food-name').value.trim();
            calories = parseFloat(document.getElementById('new-food-calories').value) || 0;
            protein = parseFloat(document.getElementById('new-food-protein').value) || 0;
            const carbs = parseFloat(document.getElementById('new-food-carbs').value) || 0;
            const fat = parseFloat(document.getElementById('new-food-fat').value) || 0;
            addedSugar = parseFloat(document.getElementById('new-food-sugar').value) || 0;
            const servingSize = document.getElementById('new-food-serving').value.trim();
            
            if (!name) {
                alert('Please enter a food name');
                return;
            }
            
            try {
                // First create the new food item
                const createResponse = await fetch('/nutrition/food/item', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name,
                        calories,
                        protein,
                        carbs,
                        fat,
                        addedSugar,
                        servingSize
                    })
                });
                
                if (!createResponse.ok) {
                    throw new Error('Failed to create food item');
                }
                
                const createData = await createResponse.json();
                foodItemId = createData.id;
            } catch (error) {
                console.error('Error creating food item:', error);
                alert('Error creating food item');
                return;
            }
        }
        
        try {
            // Now add the food to the log
            const response = await fetch('/nutrition/food', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    foodItemId,
                    date: currentDate,
                    time,
                    servings,
                    calories: calories * servings,
                    protein: protein * servings,
                    notes
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to add food to log');
            }
            
            // Close modal and reload food log
            document.getElementById('food-modal').style.display = 'none';
            loadFoodLog(currentDate);
        } catch (error) {
            console.error('Error adding food to log:', error);
            alert('Error adding food to log');
        }
    }
    
    function openEditFoodModal(entry) {
        currentEditingFood = entry;
        
        // Fill modal fields
        document.getElementById('edit-food-name').textContent = entry.name;
        document.getElementById('edit-food-servings').value = entry.servings || 1;
        document.getElementById('edit-food-calories').value = entry.calories || 0;
        document.getElementById('edit-food-protein').value = entry.protein || 0;
        document.getElementById('edit-food-time').value = entry.time;
        document.getElementById('edit-food-notes').value = entry.notes || '';
        
        // Show modal
        document.getElementById('edit-food-modal').style.display = 'flex';
    }
    
    async function updateFood() {
        if (!currentEditingFood) return;
        
        const servings = parseFloat(document.getElementById('edit-food-servings').value) || 1;
        const calories = parseFloat(document.getElementById('edit-food-calories').value) || 0;
        const protein = parseFloat(document.getElementById('edit-food-protein').value) || 0;
        const time = document.getElementById('edit-food-time').value;
        const notes = document.getElementById('edit-food-notes').value;
        
        if (!time) {
            alert('Please select a time');
            return;
        }
        
        try {
            const response = await fetch(`/nutrition/food/${currentEditingFood.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    servings,
                    calories,
                    protein,
                    notes
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to update food entry');
            }
            
            // Close modal and reload food log
            document.getElementById('edit-food-modal').style.display = 'none';
            loadFoodLog(currentDate);
        } catch (error) {
            console.error('Error updating food entry:', error);
            alert('Error updating food entry');
        }
    }
    
    async function deleteFood() {
        if (!currentEditingFood) return;
        
        if (!confirm('Are you sure you want to delete this food entry?')) {
            return;
        }
        
        try {
            const response = await fetch(`/nutrition/food/${currentEditingFood.id}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) {
                throw new Error('Failed to delete food entry');
            }
            
            // Close modal and reload food log
            document.getElementById('edit-food-modal').style.display = 'none';
            loadFoodLog(currentDate);
        } catch (error) {
            console.error('Error deleting food entry:', error);
            alert('Error deleting food entry');
        }
    }
</script>