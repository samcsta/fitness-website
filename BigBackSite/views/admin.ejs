<%- contentFor('body') %>

<div class="admin-container">
    <div class="admin-header">
        <h1>Admin Dashboard</h1>
        <button id="create-user-btn" class="btn btn-primary">
            <i class="fas fa-user-plus"></i> Create User
        </button>
    </div>
    
    <div class="admin-content">
        <div class="admin-card">
            <div class="card-header">
                <h2>User Management</h2>
            </div>
            <div class="card-body">
                <div class="user-search">
                    <input type="text" id="user-search" placeholder="Search users...">
                    <button id="search-btn" class="btn-icon">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                
                <div class="user-table-container">
                    <table class="user-table">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Current Weight</th>
                                <th>Admin</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="user-table-body">
                            <tr>
                                <td colspan="7" class="text-center">
                                    <i class="fas fa-spinner fa-spin"></i> Loading users...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Create User Modal -->
    <div id="create-user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Create New User</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="input-group">
                    <label for="new-username">Username</label>
                    <input type="text" id="new-username" required>
                </div>
                
                <div class="input-group">
                    <label for="new-email">Email</label>
                    <input type="email" id="new-email" required>
                </div>
                
                <div class="input-row">
                    <div class="input-group">
                        <label for="new-first-name">First Name</label>
                        <input type="text" id="new-first-name">
                    </div>
                    
                    <div class="input-group">
                        <label for="new-last-name">Last Name</label>
                        <input type="text" id="new-last-name">
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="new-password">Password</label>
                    <input type="password" id="new-password" required>
                </div>
                
                <div class="checkbox-group">
                    <input type="checkbox" id="new-is-admin">
                    <label for="new-is-admin">Admin User</label>
                </div>
            </div>
            <div class="modal-footer">
                <button id="save-new-user" class="btn btn-primary">Create User</button>
            </div>
        </div>
    </div>
    
    <!-- Edit User Modal -->
    <div id="edit-user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit User</h2>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="input-group">
                    <label for="edit-username">Username</label>
                    <input type="text" id="edit-username" disabled>
                </div>
                
                <div class="input-group">
                    <label for="edit-email">Email</label>
                    <input type="email" id="edit-email">
                </div>
                
                <div class="input-row">
                    <div class="input-group">
                        <label for="edit-first-name">First Name</label>
                        <input type="text" id="edit-first-name">
                    </div>
                    
                    <div class="input-group">
                        <label for="edit-last-name">Last Name</label>
                        <input type="text" id="edit-last-name">
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="edit-password">New Password (leave blank to keep current)</label>
                    <input type="password" id="edit-password">
                </div>
                
                <div class="checkbox-group">
                    <input type="checkbox" id="edit-is-admin">
                    <label for="edit-is-admin">Admin User</label>
                </div>
            </div>
            <div class="modal-footer">
                <button id="delete-user" class="btn btn-danger">Delete User</button>
                <button id="save-user" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    let users = [];
    let currentEditingUser = null;
    
    document.addEventListener('DOMContentLoaded', function() {
        // Load initial data
        loadUsers();
        
        // Set up event listeners
        document.getElementById('create-user-btn').addEventListener('click', openCreateUserModal);
        
        document.getElementById('save-new-user').addEventListener('click', createUser);
        document.getElementById('save-user').addEventListener('click', updateUser);
        document.getElementById('delete-user').addEventListener('click', deleteUser);
        
        // Search functionality
        document.getElementById('search-btn').addEventListener('click', searchUsers);
        document.getElementById('user-search').addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                searchUsers();
            }
        });
        
        // Modal close buttons
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', function() {
                const modal = this.closest('.modal');
                modal.style.display = 'none';
            });
        });
    });
    
    async function loadUsers() {
        try {
            const response = await fetch('/admin/users');
            const data = await response.json();
            
            if (!data.users) {
                throw new Error('No users found');
            }
            
            users = data.users;
            renderUsers(users);
        } catch (error) {
            console.error('Error loading users:', error);
            document.getElementById('user-table-body').innerHTML = `
                <tr>
                    <td colspan="7" class="text-center error-text">
                        <i class="fas fa-exclamation-circle"></i> Error loading users
                    </td>
                </tr>
            `;
        }
    }
    
    function renderUsers(userList) {
        const tableBody = document.getElementById('user-table-body');
        
        if (!userList.length) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center">
                        No users found
                    </td>
                </tr>
            `;
            return;
        }
        
        let html = '';
        
        userList.forEach(user => {
            const name = user.first_name && user.last_name ? 
                `${user.first_name} ${user.last_name}` : 
                '-';
            
            const createdDate = new Date(user.created_at).toLocaleDateString();
            
            html += `
                <tr data-user-id="${user.id}">
                    <td>${user.username}</td>
                    <td>${name}</td>
                    <td>${user.email}</td>
                    <td>${user.current_weight ? user.current_weight + ' lbs' : '-'}</td>
                    <td>${user.is_admin ? '<i class="fas fa-check"></i>' : ''}</td>
                    <td>${createdDate}</td>
                    <td>
                        <button class="btn-icon edit-user" title="Edit User">
                            <i class="fas fa-edit"></i>
                        </button>
                    </td>
                </tr>
            `;
        });
        
        tableBody.innerHTML = html;
        
        // Add event listeners
        document.querySelectorAll('.edit-user').forEach(btn => {
            btn.addEventListener('click', function() {
                const userId = parseInt(this.closest('tr').dataset.userId);
                const user = users.find(u => u.id === userId);
                
                if (user) {
                    openEditUserModal(user);
                }
            });
        });
    }
    
    function searchUsers() {
        const searchQuery = document.getElementById('user-search').value.toLowerCase();
        
        if (!searchQuery) {
            renderUsers(users);
            return;
        }
        
        const filteredUsers = users.filter(user => 
            user.username.toLowerCase().includes(searchQuery) ||
            (user.email && user.email.toLowerCase().includes(searchQuery)) ||
            (user.first_name && user.first_name.toLowerCase().includes(searchQuery)) ||
            (user.last_name && user.last_name.toLowerCase().includes(searchQuery))
        );
        
        renderUsers(filteredUsers);
    }
    
    function openCreateUserModal() {
        // Clear form
        document.getElementById('new-username').value = '';
        document.getElementById('new-email').value = '';
        document.getElementById('new-first-name').value = '';
        document.getElementById('new-last-name').value = '';
        document.getElementById('new-password').value = '';
        document.getElementById('new-is-admin').checked = false;
        
        // Show modal
        document.getElementById('create-user-modal').style.display = 'flex';
        
        // Focus on first field
        document.getElementById('new-username').focus();
    }
    
    function openEditUserModal(user) {
        currentEditingUser = user;
        
        // Fill form
        document.getElementById('edit-username').value = user.username;
        document.getElementById('edit-email').value = user.email || '';
        document.getElementById('edit-first-name').value = user.first_name || '';
        document.getElementById('edit-last-name').value = user.last_name || '';
        document.getElementById('edit-password').value = '';
        document.getElementById('edit-is-admin').checked = user.is_admin === 1;
        
        // Disable delete button if user is current user
        const currentUserId = <%= user.id %>;
        document.getElementById('delete-user').disabled = user.id === currentUserId;
        
        // Show modal
        document.getElementById('edit-user-modal').style.display = 'flex';
        
        // Focus on first editable field
        document.getElementById('edit-email').focus();
    }
    
    async function createUser() {
        const username = document.getElementById('new-username').value.trim();
        const email = document.getElementById('new-email').value.trim();
        const firstName = document.getElementById('new-first-name').value.trim();
        const lastName = document.getElementById('new-last-name').value.trim();
        const password = document.getElementById('new-password').value.trim();
        const isAdmin = document.getElementById('new-is-admin').checked;
        
        // Validate required fields
        if (!username || !email || !password) {
            alert('Username, email, and password are required');
            return;
        }
        
        try {
            const response = await fetch('/admin/users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username,
                    email,
                    firstName,
                    lastName,
                    password,
                    isAdmin
                })
            });
            
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Failed to create user');
            }
            
            // Close modal
            document.getElementById('create-user-modal').style.display = 'none';
            
            // Reload users
            loadUsers();
        } catch (error) {
            console.error('Error creating user:', error);
            alert(error.message || 'Error creating user');
        }
    }
    
    async function updateUser() {
        if (!currentEditingUser) return;
        
        const email = document.getElementById('edit-email').value.trim();
        const firstName = document.getElementById('edit-first-name').value.trim();
        const lastName = document.getElementById('edit-last-name').value.trim();
        const password = document.getElementById('edit-password').value.trim();
        const isAdmin = document.getElementById('edit-is-admin').checked;
        
        // Validate required fields
        if (!email) {
            alert('Email is required');
            return;
        }
        
        try {
            const response = await fetch(`/admin/users/${currentEditingUser.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email,
                    firstName,
                    lastName,
                    password: password || undefined, // Only send if not empty
                    isAdmin
                })
            });
            
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Failed to update user');
            }
            
            // Close modal
            document.getElementById('edit-user-modal').style.display = 'none';
            
            // Reload users
            loadUsers();
        } catch (error) {
            console.error('Error updating user:', error);
            alert(error.message || 'Error updating user');
        }
    }
    
    async function deleteUser() {
        if (!currentEditingUser) return;
        
        // Confirm deletion
        if (!confirm(`Are you sure you want to delete user ${currentEditingUser.username}? This action cannot be undone.`)) {
            return;
        }
        
        try {
            const response = await fetch(`/admin/users/${currentEditingUser.id}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error || 'Failed to delete user');
            }
            
            // Close modal
            document.getElementById('edit-user-modal').style.display = 'none';
            
            // Reload users
            loadUsers();
        } catch (error) {
            console.error('Error deleting user:', error);
            alert(error.message || 'Error deleting user');
        }
    }
</script>